/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.commands.Command;
import org.example.commands.CommandResult;
import org.example.exceptions.ParseException;
import org.example.logic.CommandParser;
import org.example.logic.UserInputParser;
import org.example.model.BankAccount;
import org.example.model.ModelManager;
import org.example.model.StatementList;
import org.example.storage.StorageManager;
import org.example.util.Messages;

/**
 * Acts as the main application to call all necessary functions.
 */
public class App {

    private static ModelManager modelManager;
    private static StorageManager storageManager;
    private static CommandParser commandParser;
    private static String userPrompt;

    public static void main(String[] args) {
        App.init();
        Command command;
        CommandResult commandResult = null;
        boolean isError = false;
        do {
            isError = false;
            String userinput = modelManager.getUserInput(userPrompt);
            try {
                command = commandParser.parseCommand(userinput);
            } catch (ParseException error) {
                userPrompt = error.getMessage();
                isError = true;
                continue;
            }
            commandResult = command.execute(modelManager);
            App.saveObjects();
            System.out.println(commandResult.getFeedback());
            userPrompt = Messages.getContinueMessage();
        } while (isError || !commandResult.isExit());
        UserInputParser.getInstance().closeUserInputParser();
        App.saveObjects();
    }

    private static void init() {
        App.storageManager = new StorageManager();
        StatementList statementList = new StatementList();
        BankAccount bankAccount = new BankAccount();
        if (storageManager.storageCheck()) {
            statementList = storageManager.loadStatements();
            bankAccount = storageManager.loadBankAccount();
        }
        App.modelManager = new ModelManager(statementList, bankAccount);
        App.commandParser = new CommandParser();
        App.userPrompt = Messages.getStartUpMessage();
    }

    private static void saveObjects() {
        BankAccount bankAccountToStore = new BankAccount(App.modelManager.getBankAccountForStorage());
        StatementList statementListToStore = App.modelManager.getStatementListForStorage();
        boolean isBankAccountSaved = App.storageManager.storeCurrentBankAccount(bankAccountToStore);
        boolean isStatementSaved = App.storageManager.storeCurrentStatements(statementListToStore);
    }
}
